'''
Tiffany Fabianac Modified code from:
Reading GMAIL using Python
    - https://github.com/abhishekchhibber/Gmail-Api-through-Python
	- Abhishek Chhibber
'''

'''
This script does the following:
- Go to Gmal inbox
- Find and read all the Google Alert messages
- Extract details (Date, Snippet,URL) and export them to a .csv file / DB
'''

'''
Before running this script, the user should get the authentication by following 
the link: https://developers.google.com/gmail/api/quickstart/python
Also, client_secret.json should be saved in the same directory as this file
'''

# Importing required libraries
import base64
import email
from apiclient import discovery
from httplib2 import Http
from oauth2client import file, client, tools
import urllib
import re
import dateutil.parser as parser
import json


# Creating a storage.JSON file with authentication details
SCOPES = 'https://www.googleapis.com/auth/gmail.modify'  # we are using modify and not readonly, as we will be marking the messages Read
store = file.Storage('storage.json')
creds = store.get()
if not creds or creds.invalid:
    flow = client.flow_from_clientsecrets('client_secret.json', SCOPES)
    creds = tools.run_flow(flow, store)
GMAIL = discovery.build('gmail', 'v1', http=creds.authorize(Http()))

user_id = 'me'
label_id_one = 'INBOX'

# Getting Google Alert messages from Inbox
    #maxResults=1, q='from:googlealerts-noreply@google.com is:unread'
alert_msgs = GMAIL.users().messages().list(userId='me', labelIds=[label_id_one], maxResults=1,
                                           q='from:googlealerts-noreply@google.com').execute()
##RETURNS: {'messages': [{'id': '1645db225f22f01b', 'threadId': '1644e1a892b315c7'}], 'nextPageToken': '16344340453457345441', 'resultSizeEstimate': 4}

# Read values for the key 'messages'
mssg_list = alert_msgs['messages']
##RETURNS: [{'id': '1645db225f22f01b', 'threadId': '1644e1a892b315c7'}]

final_list = []
for mssg in mssg_list:
    temp_dict = {}
    # get id of individual message
    m_id = mssg['id']

    # fetch the message using API
    # format='raw'
    message = GMAIL.users().messages().get(userId=user_id, id=m_id).execute()
    '''
    RETURNS: {
             'id': '1645db225f22f01b',
             'threadId': '1644e1a892b315c7',
             'labelIds': ['IMPORTANT', 'CATEGORY_UPDATES', 'INBOX'],
             'snippet': 'Google Phase III trial As-it-happens update â‹… July 3, 2018 NEWS Dr. Yardley on the Role of Biosimilars in Breast Cancer OncLive The phase III trial showed an equivalent pathologic complete response',
             'historyId': '3276761', 
             'internalDate': '1530580312000',
             'payload': {
                'partId': '', 
                'mimeType': 'multipart/alternative', 
                'filename': '',
                'headers': [
                   {'name': 'Delivered-To', 
                   'value': 'tiffanyfabianac@gmail.com'
                   },
                   {'name': 'Received',  'value': 'by 2002:a67:7cc7:0:0:0:0:0 with SMTP id x190-v6csp496217vsc;        Mon, 2 Jul 2018 18:11:53 -0700 (PDT)'},
                   {'name': 'X-Received', 'value': 'by 2002:a25:e7c8:: with SMTP id e191-v6mr14135883ybh.358.1530580313504;        Mon, 02 Jul 2018 18:11:53 -0700 (PDT)'},
                   {'name': 'ARC-Seal', 'value': 'i=1; a=rsa-sha256; t=1530580313; cv=none;        d=google.com; s=arc-20160816;        b=mU8UUtj7ocw8+KCZLIUQeoVIqGlkGEjdt5y/rHB9zIu9WivLp4nhm/EQDwhSEiKWQz         fu/ooKubGTQnsa80kfxPkkGQI5n6KCgyiZ3lrCbNO6LLq0vvmp4C/5IR+pMlT8Eim+5t         h6gEc8ssn7pPg+r0JrwmD3A5TA8G7XhP9Iz910icHKiPfyg3yhXXYkGXrpCUqyuDXTnD         SpXGa5OWwIAF0hh/s2hZPwewvQr+UtjZvjHG8Q5bzCBQsnVDhxDNbvRTK7zMwyG41OM9         l2bV+wJbxmqeVKolU/Qrm5t/B+4pH2M6JF0RfP5AVX6+ZFr/LV4PJCdArmdTJn2ZgtE7         a07A=='},
                   {'name': 'ARC-Message-Signature',  'value': 'i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;        h=to:from:subject:message-id:list-unsubscribe:list-id:date         :mime-version:dkim-signature:arc-authentication-results;        bh=9r86Eg1CwIukfK0DSWCms++zhn5NAd7rfZJut81wR5k=;        b=Ecn/KekxBObsgIke5n9Wale55ksCncSFWNlv/xpcek2o/kKm+pBSYC2HsXEOR9Uk9n         dmaC0c9ueAUYCtL0nTypZ+gMgcka/vsiZeYoo+TS0cd08Z0CW2rRYVRWCPe/FfVUB8HP         Oh7zTixDjiCBMvil7ktG/iSjVgxFkE40QyRmCB95yr5BMF/iQJ8iiLoVybqy+KmmRXf2         eC+e8ifmyv+T/dJ3/X+AdSzMnWBReAKJCGqfrLxKDFpQwdnMiPAtSnwYJzB8reEMgCuz         hnPJ0QczzYp06/m8u8nPTbUW3OoQ9XxnpNLlvLv6HFuq9ku9X9RNRU8jx8ByeDVyRh1d         Z6WQ=='},
                   {'name': 'ARC-Authentication-Results',  'value': 'i=1; mx.google.com;       dkim=pass header.i=@google.com header.s=20161025 header.b=BqSripFi;       spf=pass (google.com: domain of 3wm06wxqkal0jrrjohdohuwv-qruhso1jrrjoh.frp@alerts.bounces.google.com designates 209.85.220.69 as permitted sender) smtp.mailfrom=3WM06WxQKAL0jrrjohdohuwv-qruhso1jrrjoh.frp@alerts.bounces.google.com;       dmarc=pass (p=REJECT sp=REJECT dis=NONE) header.from=google.com'},
                   {'name': 'Return-Path', 'value': '<3WM06WxQKAL0jrrjohdohuwv-qruhso1jrrjoh.frp@alerts.bounces.google.com>'}, {'name': 'Received', 'value': 'from mail-sor-f69.google.com (mail-sor-f69.google.com. [209.85.220.69])        by mx.google.com with SMTPS id 82-v6sor4071997ybz.185.2018.07.02.18.11.53        for <tiffanyfabianac@gmail.com>        (Google Transport Security);        Mon, 02 Jul 2018 18:11:53 -0700 (PDT)'},
                   {'name': 'Received-SPF', 'value': 'pass (google.com: domain of 3wm06wxqkal0jrrjohdohuwv-qruhso1jrrjoh.frp@alerts.bounces.google.com designates 209.85.220.69 as permitted sender) client-ip=209.85.220.69;'},
                   {'name': 'Authentication-Results', 'value': 'mx.google.com;       dkim=pass header.i=@google.com header.s=20161025 header.b=BqSripFi;       spf=pass (google.com: domain of 3wm06wxqkal0jrrjohdohuwv-qruhso1jrrjoh.frp@alerts.bounces.google.com designates 209.85.220.69 as permitted sender) smtp.mailfrom=3WM06WxQKAL0jrrjohdohuwv-qruhso1jrrjoh.frp@alerts.bounces.google.com;       dmarc=pass (p=REJECT sp=REJECT dis=NONE) header.from=google.com'},
                   {'name': 'DKIM-Signature', 'value': 'v=1; a=rsa-sha256; c=relaxed/relaxed;        d=google.com; s=20161025;        h=mime-version:date:list-id:list-unsubscribe:message-id:subject:from         :to;        bh=9r86Eg1CwIukfK0DSWCms++zhn5NAd7rfZJut81wR5k=;        b=BqSripFiLq2sqIN/PHts9wLXr9/hlqCJpYmx97azZzfGJrUCcJVHrFj+H+ft7a2F47         Piu+fkmprHFN1NanT0OuYWjTVmTKDvzwTSJ2gSfDR49jpYveXZSrxjoQXBesoXQUxh98         94FvRCzsw0Vem24g0lUnTvjmcATlse1J+OL+BCT/6uv1cpCWkBMWtoCNBp2bb8Todx/C         CJNenfuBDjoFIoE9XcpmEuVmaNvk36m3rWdAr3XBIt0rVDMABMbQujWm+QimF/M040gG         ao0ehCb+QKgI+So+vUwRK7aioCOGngsxAjCTVnFlGlhoTnAF9HieLcpTt4tIxdvgi6yu         fR5Q=='},
                   {'name': 'X-Google-DKIM-Signature', 'value': 'v=1; a=rsa-sha256; c=relaxed/relaxed;        d=1e100.net; s=20161025;        h=x-gm-message-state:mime-version:date:list-id:list-unsubscribe         :message-id:subject:from:to;        bh=9r86Eg1CwIukfK0DSWCms++zhn5NAd7rfZJut81wR5k=;        b=GfY1Y5PqRYnF7NMu15paoNqquSXnDYOM/VsbWBm1x/i5auUs+FhBNOmrLZo/Kn5PaS         4aH+x6tEldP5V0OmS4lLL2NDZwGN5Z57R2e6b5GMfN60nrL2TLZih+D7mMpIcauq5eWb         FGZJYivEM4z+COSpCSB/K3o4jCQKRSGs5o070HwhbNIB3eB2XHFfbyC57h+xlnfTssxD         9Si4I0naSPc4aFkD5HzXUZ8c80wdVpjZQSUy25K4W1WZQ5lTp7fLrXm5JX7YlCPV9CcE         4sccIXiUGKql021JhbiorMYf52yP8w2uZm5MeeucHiPeBOdbSrxqu4zRy0XLCkoJT5zT         RfMQ=='}, {'name': 'X-Gm-Message-State', 'value': 'APt69E27szFihIx5AGfr09D5H3zL9qmvELdzWXRPVMCX8g4Ylmmrfujp hlPEW7ugivU='}, {'name': 'X-Google-Smtp-Source', 'value': 'ADUXVKJk9ZZV72gBSPr06HYC5DTltujUq4EoDXGBs0mvbz2wiFZMzKQnzlUC3eKAMN0/GfE20c4='},
                   {'name': 'MIME-Version', 'value': '1.0'},
                   {'name': 'X-Received', 'value': 'by 2002:a25:8706:: with SMTP id a6-v6mr8168201ybl.49.1530580312922; Mon, 02 Jul 2018 18:11:52 -0700 (PDT)'}, {'name': 'Date', 'value': 'Mon, 02 Jul 2018 18:11:52 -0700'}, {'name': 'List-Id', 'value': '<11057473802345533838.alerts.google.com>'}, {'name': 'List-Unsubscribe', 'value': '<mailto:ur@unsubscribe.alerts.google.com?subject=AB2Xq4hvjI58wr9UK4tU7q0qsP1xftiU6kOl3SA>'}, {'name': 'Message-ID', 'value': '<000000000000da1bf605700dffc3@google.com>'},
                   {'name': 'Subject', 'value': 'Google Alert - Phase III trial'},
                   {'name': 'From', 'value': 'Google Alerts <googlealerts-noreply@google.com>'},
                   {'name': 'To', 'value': 'tiffanyfabianac@gmail.com'},
                   {'name': 'Content-Type', 'value': 'multipart/alternative; boundary="000000000000da1bcf05700dffc0"'}],
             'body': {'size': 0},
             'parts': [{'partId': '0', 'mimeType': 'text/plain', 'filename': '',
                'headers': [
                    {'name': 'Content-Type', 'value': 'text/plain; charset="UTF-8"; format=flowed; delsp=yes'},
                    {'name': 'Content-Transfer-Encoding', 'value': 'base64'}],
                'body': {'size': 2131, 'data': 'PT09IE5ld3MgLSAzIG5ldyByZXN1bHRzIGZvciBbUGhhc2UgSUlJIHRyaWFsXSA9PT0NCg0KRHIuIFlhcmRsZXkgb24gdGhlIFJvbGUgb2YgQmlvc2ltaWxhcnMgaW4gQnJlYXN0IENhbmNlcg0KT25jTGl2ZQ0KVGhlIHBoYXNlIElJSSB0cmlhbCBzaG93ZWQgYW4gZXF1aXZhbGVudCBwYXRob2xvZ2ljIGNvbXBsZXRlIHJlc3BvbnNlIHJhdGUNCmJldHdlZW4gdHJhc3R1enVtYWIgKEhlcmNlcHRpbikgYW5kIHRoZSBiaW9zaW1pbGFyIEFCUCA5ODAuIEFsdGhvdWdoIC4uLg0KPGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vdXJsP3JjdD1qJnNhPXQmdXJsPWh0dHBzOi8vd3d3Lm9uY2xpdmUuY29tL29uY2xpdmUtdHYvZHIteWFyZGxleS1vbi10aGUtcm9sZS1vZi1iaW9zaW1pbGFycy1pbi1icmVhc3QtY2FuY2VyJmN0PWdhJmNkPUNBRVlBQ29UTWpRNE9Ea3pNVGd3TlRZM01UTTJPRFF5TVRJY04yUTRNR0V4T1dObE1UbGhNVGM0TmpwamIyMDZaVzQ2VlZNNlVnJnVzZz1BRlFqQ05Ha3U3R19TN3Z2UzlmMENkRVlBRmVhdmdxT3dBPg0KDQpOZXcgUmFkaW90aGVyYXB5IFByb3N0YXRlIENhbmNlciBUcmVhdG1lbnQsIFNwYWNlT0FSwq4gSHlkcm9nZWwsIE5vdw0KQXZhaWxhYmxlIGluIEphcGFuDQpDaXRpemVudHJpYnVuZQ0KQ29udGludWVkIEJlbmVmaXQgdG8gUmVjdGFsIFNlcGFyYXRpb24gZm9yIFByb3N0YXRlIFJUOiBGaW5hbCBSZXN1bHRzIG9mIGENClBoYXNlIElJSSBUcmlhbC4gSW50IEogUmFkaWF0IE9uY29sIEJpb2wgUGh5czsgMjAxNyBWb2x1bWUgOTcsIElzc3VlIDUsDQpQYWdlcyAuLi4NCjxodHRwczovL3d3dy5nb29nbGUuY29tL3VybD9yY3Q9aiZzYT10JnVybD1odHRwczovL3d3dy5jaXRpemVudHJpYnVuZS5jb20vbmV3cy9idXNpbmVzcy9uZXctcmFkaW90aGVyYXB5LXByb3N0YXRlLWNhbmNlci10cmVhdG1lbnQtc3BhY2VvYXItaHlkcm9nZWwtbm93LWF2YWlsYWJsZS1pbi9hcnRpY2xlXzcwYWEyOGMzLTA3N2QtNWJlMS1iMThmLTRjNDcyZjY3ZjhjNy5odG1sJmN0PWdhJmNkPUNBRVlBU29UTWpRNE9Ea3pNVGd3TlRZM01UTTJPRFF5TVRJY04yUTRNR0V4T1dObE1UbGhNVGM0TmpwamIyMDZaVzQ2VlZNNlVnJnVzZz1BRlFqQ05FcGFJV0dmWmhXMlcycnlhZS1JMHo3WjZSNU1RPg0KDQpEci4gSHVtcGhyZXkgb24gTW9nYW11bGl6dW1hYiBmb3IgQ3V0YW5lb3VzIFQtQ2VsbCBMeW1waG9tYQ0KT25jTGl2ZQ0KLi4uIHdpdGggY3V0YW5lb3VzIFQtY2VsbCBseW1waG9tYSAoQ1RDTCkgdGhhdCB3ZXJlIHJlcG9ydGVkIGluIHRoZSBwaGFzZQ0KSUlJIE1BVk9SSUMgdHJpYWwsIHdoaWNoIHdhcyBwcmVzZW50ZWQgYXQgdGhlIDIwMTggQVNDTyBBbm51YWwgTWVldGluZy4NCjxodHRwczovL3d3dy5nb29nbGUuY29tL3VybD9yY3Q9aiZzYT10JnVybD1odHRwczovL3d3dy5vbmNsaXZlLmNvbS9vbmNsaXZlLXR2L2RyLWh1bXBocmV5LW9uLW1vZ2FtdWxpenVtYWItZm9yLWN1dGFuZW91cy10Y2VsbC1seW1waG9tYSZjdD1nYSZjZD1DQUVZQWlvVE1qUTRPRGt6TVRnd05UWTNNVE0yT0RReU1USWNOMlE0TUdFeE9XTmxNVGxoTVRjNE5qcGpiMjA2Wlc0NlZWTTZVZyZ1c2c9QUZRakNORUlWVHVKZTkxaHhDLVMtX1doQkFMdXUyMHB6UT4NCg0KDQotIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtDQpVbnN1YnNjcmliZSBmcm9tIHRoaXMgR29vZ2xlIEFsZXJ0Og0KPGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vYWxlcnRzL3JlbW92ZT9zb3VyY2U9YWxlcnRzbWFpbCZobD1lbiZnbD1VUyZtc2dpZD1NalE0T0Rrek1UZ3dOVFkzTVRNMk9EUXlNUSZzPUFCMlhxNGh2akk1OHdyOVVLNHRVN3EwcXNQMXhmdGlVNmtPbDNTQT4NCg0KQ3JlYXRlIGFub3RoZXIgR29vZ2xlIEFsZXJ0Og0KPGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vYWxlcnRzP3NvdXJjZT1hbGVydHNtYWlsJmhsPWVuJmdsPVVTJm1zZ2lkPU1qUTRPRGt6TVRnd05UWTNNVE0yT0RReU1RPg0KDQpTaWduIGluIHRvIG1hbmFnZSB5b3VyIGFsZXJ0czoNCjxodHRwczovL3d3dy5nb29nbGUuY29tL2FsZXJ0cz9zb3VyY2U9YWxlcnRzbWFpbCZobD1lbiZnbD1VUyZtc2dpZD1NalE0T0Rrek1UZ3dOVFkzTVRNMk9EUXlNUT4NCg=='}},
                    {'partId': '1', 'mimeType': 'text/html', 'filename': '',
                'headers': [{'name': 'Content-Type', 'value': 'text/html; charset="UTF-8"'},
                    {'name': 'Content-Transfer-Encoding', 'value': 'quoted-printable'}],
             'body': {'size': 22634, 'data': ''}}]}, 'sizeEstimate': 32554}
        '''
    # Get the data from the message
    payld = message['payload']

    # Get Date
    headr = payld['headers']  # get header of the payload
    for two in headr:
        if two['name'] == 'Date':
            msg_date = two['value']
            date_parse = (parser.parse(msg_date))
            m_date = (date_parse.date())
            msg_date = str(m_date)
        else:
            pass

    # Get Message
    parts = payld['parts']
    for i in parts:
        if i['partId'] == '0':
            msg_str = base64.urlsafe_b64decode(i['body'].get('data'))
            mime_msg = email.message_from_string(bytes.decode(msg_str))
        else:
            pass

    # Remove the Unsubscribe and Google related links from message
    msg_string = mime_msg.as_string()
    msg_string = msg_string.rsplit('- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -', 1)[0]
    msg_string = re.sub(r'===*.*===\n\n', '', msg_string)


    # Extract Hyperlinks
    myList =[]
   # summaries = []
    #urls = re.sub(r'>', '',re.search("(?P<url>https?://[^\s]+)", msg_string).group("url"))
    urls = re.findall("(=https://www.*.*?>)",msg_string)
    for i in range(len(urls)):
        sURL = urls[i][1:-1]
        summaries = re.sub(r'\n', ' ', msg_string.partition(urls[i])[0]).rsplit('<https://www.google.com', 1)[0]

        if i != 0:
            temp_link = urls[i-1][1:-1]
            summaries = summaries.partition(temp_link)[2]

        temp_dict = ({'Date': msg_date, 'URL': sURL, 'Summary': summaries})
        myList.append(temp_dict)


print (myList)